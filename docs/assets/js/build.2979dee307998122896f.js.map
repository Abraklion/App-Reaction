{"version":3,"file":"assets/js/build.2979dee307998122896f.js","mappings":"+WASe,MAAMA,EAOH,iBAACC,EAAIC,GACnB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,EAI5C,YAACK,GACVA,EAAIC,UAAUC,OAAO,QAIZ,YAACF,GACVA,EAAIC,UAAUE,IAAI,QAQpBC,cAAc,4DACZC,KAAKC,OAASC,SAASC,cAAc,UACrCH,KAAKI,MAAQF,SAASC,cAAc,SACpCH,KAAKK,MAAQH,SAASC,cAAc,SACpCH,KAAKM,QAAUJ,SAASC,cAAc,WACtCH,KAAKO,YAAcL,SAASC,cAAc,gBAC1CH,KAAKQ,YAAcN,SAASC,cAAc,kBAC1CH,KAAKS,UAAYP,SAASC,cAAc,cACxCH,KAAKU,MAAQ,EACbV,KAAKW,eAAgB,EACrBX,KAAKY,UAAY,CAAC,MAAO,QAAQ,OAAO,SAAS,QAAQ,OAAO,QAAQ,UAS1EC,cAGEb,KAAKC,OAAOa,iBAAiB,SAAS,KAEpC,EAAAd,KAAA,UAAAA,SAKFA,KAAKI,MAAMU,iBAAiB,SAAUC,IAEjCA,EAAIC,OAAOC,QAAQC,KAEpB,EAAAlB,KAAA,UAAAA,SAOJA,KAAKS,UAAUK,iBAAiB,SAAS,KAEvC,EAAAd,KAAA,UAAAA,U,aAcFA,KAAKU,MAAQ,EACbV,KAAKW,eAAgB,EAErB,EAAAX,KAAA,UAAAA,MAEAA,KAAKS,UAAUU,aAAa,WAAW,QAEvCnB,KAAKI,MAAMgB,MAAMC,gBAAkB,OACnCrB,KAAKC,OAAOL,UAAUE,IAAI,QAG1B,IAAIwB,EAAWC,aAAY,KAEzB,IAAIC,EAAOC,WAAWzB,KAAKK,MAAMqB,WAE7BF,GAAQ,GAEVG,cAAcL,GAEd,EAAAtB,KAAA,UAAAA,OAGAA,KAAKK,MAAMqB,WAAaF,EAAO,IAAKI,QAAQ,KAG9C,KAEF,EAAA5B,KAAA,UAAAA,M,aAMAA,KAAKW,eAAgB,EAErB,EAAAX,KAAA,UAAAA,MAEAA,KAAKS,UAAUoB,gBAAgB,YAE/B7B,KAAKI,MAAM0B,UAAY,GACvB9B,KAAKI,MAAMgB,MAAMC,gBAAkB,OAEnChC,EAAS0C,KAAK/B,KAAKC,QACnBZ,EAAS2C,KAAKhC,KAAKO,aACnBlB,EAAS0C,KAAK/B,KAAKQ,a,aAOnB,IAAIgB,GAAQxB,KAAKS,UAAUwB,MAE3BjC,KAAKK,MAAMqB,UAAYF,EAAKI,QAAQ,GAEpCvC,EAAS0C,KAAK/B,KAAKO,aACnBlB,EAAS2C,KAAKhC,KAAKQ,a,aAOnBR,KAAKM,QAAQoB,UAAY1B,KAAKU,M,aAO9B,IAAIV,KAAKW,cAEP,OAAO,EAITX,KAAKU,QAEL,EAAAV,KAAA,UAAAA,M,aAQAA,KAAKI,MAAM0B,UAAY,GAEvB,IAAIZ,EAAMhB,SAASgC,cAAc,OAC7BC,EAAU9C,EAAS+C,UAAU,GAAG,KAChCC,EAAWrC,KAAKI,MAAMkC,wBACtBC,EAASF,EAASG,OAASL,EAC3BM,EAAUJ,EAASK,MAAQP,EAE/BjB,EAAIE,MAAMoB,OAAStB,EAAIE,MAAMsB,MAAV,UAAqBP,EAArB,MACnBjB,EAAIE,MAAMuB,SAAW,WACrBzB,EAAIE,MAAMC,gBAAV,UAA+BrB,KAAKY,UAAUvB,EAAS+C,UAAU,EAAEpC,KAAKY,UAAUgC,OAAQ,KAC1F1B,EAAIE,MAAMyB,IAAV,UAAmBxD,EAAS+C,UAAU,EAAEG,GAAxC,MACArB,EAAIE,MAAM0B,KAAV,UAAoBzD,EAAS+C,UAAU,EAAEK,GAAzC,MACAvB,EAAIE,MAAM2B,OAAS,UACnB7B,EAAIC,aAAa,WAAW,QAE5BnB,KAAKI,MAAM4C,sBAAsB,aAAc9B,IC3LtC,IAAI7B,GAGZwB,c","sources":["webpack://two-webpack/./src/module/Reaction.js","webpack://two-webpack/./src/index.js"],"sourcesContent":["/*\n\n  Класс Игра на реакцию\n\n  // -> - статический метод\n  // <- - частный метод\n\n*/\n\nexport default class Reaction {\n\n  /* ===========================\n   *    Статические методы     *\n   ============================*/\n\n  // > Случайное число (min,max включительно) <\n  static getRandom(min,max){\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  // > Показать элемент <\n  static show($el){\n    $el.classList.remove('hide');\n  }\n\n  // > Скрыть элемент <\n  static hide($el){\n    $el.classList.add('hide');\n  }\n\n\n  /* ===========================\n   *        Конструктор        *\n   ============================*/\n\n  constructor() {\n    this.$start = document.querySelector('#start');\n    this.$game = document.querySelector('#game');\n    this.$time = document.querySelector('#time');\n    this.$result = document.querySelector('#result');\n    this.$timeHeader = document.querySelector('#time-header');\n    this.$timeResult = document.querySelector('#result-header');\n    this.$gameTime = document.querySelector('#game-time');\n    this.score = 0; // счетчик склько раз кликнули на квадрат\n    this.isGameStarted = false; // переключатель (по умолчанию игра не запущена)\n    this.colorsBox = ['red', 'green','blue','yellow','black','pink','brown','orange'];\n  }\n\n\n  /* ===========================\n   *      Публичные методы     *\n   ============================*/\n\n  // > Точка входа <\n  appReaction(){\n\n    // вешаем события клика на кнопку \"Начать\"\n    this.$start.addEventListener(\"click\", () => {\n\n      this.#startGame(); // <- запускает игру\n\n    });\n\n    // вешаем события клика на класс \"game\" на квадрат через делегирования\n    this.$game.addEventListener(\"click\", (evt) => {\n\n      if(evt.target.dataset.box){\n\n        this.#handleBoxClick(); // <- перезаписывает квадрат\n\n      }\n\n    });\n\n    // вешаем события ввода на id \"game-time\"\n    this.$gameTime.addEventListener(\"input\", () => {\n\n      this.#setGameTime(); // <- задает время игры\n\n    });\n\n  }\n\n\n  /* ===========================\n   *       Частный методы      *\n   ============================*/\n\n  // > Запускает игру <\n  #startGame(){\n\n    this.score = 0;\n    this.isGameStarted = true;\n\n    this.#setGameTime(); // <- задает время игры\n\n    this.$gameTime.setAttribute('disabled','true')\n\n    this.$game.style.backgroundColor = '#fff';\n    this.$start.classList.add('hide');\n\n    // секундомер\n    let interval = setInterval(() =>{\n\n      let time = parseFloat(this.$time.innerText);\n\n      if (time <= 0){\n\n        clearInterval(interval);\n\n        this.#endGame(); // <- останавливает игру\n\n      }else {\n        this.$time.innerText = (time - 0.1).toFixed(1);\n      }\n\n    },100)\n\n    this.#renderBox(); // <- рисует квадрат\n  }\n\n  // > Конец игры <\n  #endGame(){\n\n    this.isGameStarted = false;\n\n    this.#setGameScore(); // <- показывает результат\n\n    this.$gameTime.removeAttribute('disabled');\n\n    this.$game.innerHTML = '';\n    this.$game.style.backgroundColor = '#ccc';\n\n    Reaction.show(this.$start); // -> показать элемент\n    Reaction.hide(this.$timeHeader); // -> скрыть элемент\n    Reaction.show(this.$timeResult); // -> показать элемент\n\n  }\n\n  // > Время игры <\n  #setGameTime(){\n\n    let time = +this.$gameTime.value;\n\n    this.$time.innerText = time.toFixed(1);\n\n    Reaction.show(this.$timeHeader); // -> показать элемент\n    Reaction.hide(this.$timeResult); // -> скрыть элемент\n\n  }\n\n  // > Выводит результат игры <\n  #setGameScore(){\n\n    this.$result.innerText = this.score;\n\n  }\n\n  // > Перезаписывает квадрат и обновляет счетчик <\n  #handleBoxClick(){\n\n    if(!this.isGameStarted){\n\n      return false;\n\n    }\n\n    this.score++;\n\n    this.#renderBox(); // <- рисует квадрат\n\n  }\n\n  // > Рисует квадраты <\n  #renderBox(){\n\n    // очищаем вид с классом game\n    this.$game.innerHTML = '';\n\n    let box = document.createElement('div');\n    let boxSize = Reaction.getRandom(30,100); // -> ширина и высота квадрата\n    let gameSize = this.$game.getBoundingClientRect(); // параметры полотна для игры\n    let maxTop = gameSize.height - boxSize; // наксимальное смешения квадрата в вниз\n    let maxLeft = gameSize.width - boxSize;// наксимальное смешения квадрата в лево\n\n    box.style.height = box.style.width = `${boxSize}px`;\n    box.style.position = 'absolute';\n    box.style.backgroundColor = `${this.colorsBox[Reaction.getRandom(0,this.colorsBox.length -1)]}`;\n    box.style.top = `${Reaction.getRandom(0,maxTop)}px`; // -> координаты с верху\n    box.style.left = `${Reaction.getRandom(0,maxLeft)}px`; // -> координаты с лева\n    box.style.cursor = 'pointer';\n    box.setAttribute('data-box','true');\n\n    this.$game.insertAdjacentElement('afterbegin', box);\n\n  }\n\n}\n","import './scss/index.scss'; // подключаем стили\n\nimport Reaction from \"./module/Reaction\"; // подключаем класс\n\n\n// создаем экземпляр класса\nconst game = new Reaction();\n\n// метод запускает игру\ngame.appReaction();\n\n\n\n"],"names":["Reaction","min","max","Math","floor","random","$el","classList","remove","add","constructor","this","$start","document","querySelector","$game","$time","$result","$timeHeader","$timeResult","$gameTime","score","isGameStarted","colorsBox","appReaction","addEventListener","evt","target","dataset","box","setAttribute","style","backgroundColor","interval","setInterval","time","parseFloat","innerText","clearInterval","toFixed","removeAttribute","innerHTML","show","hide","value","createElement","boxSize","getRandom","gameSize","getBoundingClientRect","maxTop","height","maxLeft","width","position","length","top","left","cursor","insertAdjacentElement"],"sourceRoot":""}